
"""
Creates a multiprocess, multithread application to detect high
readings.

See https://www.assemblesoftware.com/examples/

"""

import sys
import os
import math

sys.path.append(os.path.abspath("../../IoTPy/multiprocessing"))
sys.path.append(os.path.abspath("../../IoTPy/core"))
sys.path.append(os.path.abspath("../../IoTPy/agent_types"))
sys.path.append(os.path.abspath("../../IoTPy/helper_functions"))

# multicore is in multiprocessing
from multicore import shared_memory_process, Multiprocess
# stream is in core
from stream import Stream
# op, merge, source, sink are in agent_types
from merge import zip_map
from source import source_float_file
from sink import stream_to_file
# accelerometer_agents are in ("./accelerometer_agents")
from accelerometer_agents import subtract_mean, magnitude_of_vector
from accelerometer_agents import simple_anomalies
from actuators_simple import queue_to_file

# ----------------------------------------------------------------
# COMPUTE FUNCTION f
# ----------------------------------------------------------------
def compute_func(in_streams, out_streams):
    """
    Detects anomalies in streams generated by triaxial sensors.

    Parameters
    ----------
    in_streams: list of Stream
      in_streams is a list of 3 streams indicating measurements
      in e, n, and z (for east, north, vertical) directions.
      These streams are generated by a triaxial sensor.
    out_streams: list of Stream
      out_streams has only one element, which is a
      Stream of int. An element of this stream is either
      1.0 or 0.0. An element is 1.0 to indicate that an
      anomaly was detected in in_streams and is 0.0 otherwise.

    """
    
    #------------------------------------------------------------------
    # DECLARE INTERNAL STREAMS
    #------------------------------------------------------------------
    # magnitudes is a stream of magnitudes of a stream of vectors
    # where each vector is given by its e, n, z values.
    magnitudes = Stream('magnitudes')

    #----------------------------------------------------
    # CREATE AGENTS
    #----------------------------------------------------
    # This agent generates streams of magnitudes of vectors
    # from streams of the components of the vectors.
    magnitude_of_vector(in_streams, out_stream=magnitudes)
    # This agent generates streams of anomalies from
    # streams of magnitudes.
    simple_anomalies(
        in_stream=magnitudes, out_stream=out_streams[0],
        threshold=0.05)
    # Agents that put data into files for plots and analysis.
    stream_to_file(magnitudes, 'magnitude.txt')
    ## stream_to_file(out_streams[0], 'local_anomalies.txt')

# anomalies_actuator is a separate thread that writes results
# to a file. You can also use stream_to_file which runs in the
# compute_func thread, and works just as well. This example
# tests the actuator.
anomalies_actuator = queue_to_file(
    filename='local_anomalies.txt', timeout=1.0)

# ----------------------------------------------------------------
#  DEFINE SOURCES
# ----------------------------------------------------------------
directions = ['e', 'n', 'z']
TIME_INTERVAL=0.0001
NUM_STEPS=None

def source(filename):
    """
    This function creates a source by reading a file of
    floats. The source generates an element every
    TIME_INTERVAL seconds and stops after NUM_STEPS
    number of steps if NUM_STEPS is not None and outputs
    the entire file if NUM_STEPS is None.
    
    Parameters
    ----------
    filename: str
      name of a file

    """
    return source_float_file(
        filename, TIME_INTERVAL, NUM_STEPS).source_func

def local_anomaly_process(filenames):
    """
    Returns a shared memory process which gets data from
    sources with data from each file in filenames, and which
    saves anomalies to a file called local_anomalies.txt
    and saves the magnitude stream to a file called
    magnitude.txt

    Parameters
    ----------
    filenames: list
       filenames is a list of filename
       where filename is the name of a file containing
       data in one of the axes --- east, north, vertical ---
       generated by a sensor.

    """
    return shared_memory_process(
        compute_func=compute_func,
        in_stream_names=directions,
        out_stream_names=['out'],
        connect_sources=[
            (directions[i], source(filenames[i]))
            for i in range(len(directions))],
        connect_actuators=[
            ('out', anomalies_actuator.actuate)
            ]
        )

if __name__ == '__main__':
    # filenames has data recorded from east, north,
    # and vertical directions from a sensor
    filenames = ['S1.e.txt', 'S1.n.txt', 'S1.z.txt']
    proc = local_anomaly_process(filenames)
    mp = Multiprocess(processes=[proc], connections=[])
    mp.run()
    
